USE TestDb;
BEGIN TRANSACTION;
GO
CREATE OR ALTER TRIGGER [STOREHOUSE].[PRODUCT_INSERT] ON [STOREHOUSE].[PRODUCT]
   AFTER INSERT
AS 
BEGIN
	SET ANSI_NULLS ON;
	SET QUOTED_IDENTIFIER ON;
	-- Insert statements for trigger here
	IF (ROWCOUNT_BIG() = 0) RETURN;
	
	INSERT INTO [STOREHOUSE].[EVENTLOG]
	SELECT
		NEWID(),
		sysdatetimeoffset() as EVENTDATE,
		(SELECT * FROM deleted FOR JSON PATH, ROOT('INSERT') ) AS DESCRIPTION
	FROM inserted;

END
GO
CREATE OR ALTER TRIGGER [STOREHOUSE].[PRODUCT_DELETE] ON [STOREHOUSE].[PRODUCT]
   AFTER DELETE
AS 
BEGIN
	SET ANSI_NULLS ON;
	SET QUOTED_IDENTIFIER ON;
	-- Insert statements for trigger here
	IF (ROWCOUNT_BIG() = 0) RETURN;
	
	INSERT INTO [STOREHOUSE].[EVENTLOG]
	SELECT
		NEWID(),
		sysdatetimeoffset() as EVENTDATE,
		(SELECT * FROM deleted FOR JSON PATH, ROOT('DELETE') ) AS DESCRIPTION
	FROM deleted;

END
GO
CREATE OR ALTER TRIGGER [STOREHOUSE].[PRODUCT_UPDATE] ON [STOREHOUSE].[PRODUCT]
   AFTER UPDATE
AS 
BEGIN
	SET ANSI_NULLS ON;
	SET QUOTED_IDENTIFIER ON;
	-- Insert statements for trigger here
	IF (ROWCOUNT_BIG() = 0) RETURN;
	
	INSERT INTO [STOREHOUSE].[EVENTLOG]
	SELECT
		NEWID(),
		sysdatetimeoffset() as EVENTDATE,
		(SELECT * FROM inserted FOR JSON PATH, ROOT('UPDATE') ) AS DESCRIPTION
	FROM inserted;

END
GO
ENABLE TRIGGER ALL ON [STOREHOUSE].[PRODUCT];
COMMIT TRANSACTION;
